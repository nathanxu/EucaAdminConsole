package net.owlgroup.ea.cloudmanagement.action;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.alibaba.citrus.turbine.Context;
import com.alibaba.citrus.turbine.dataresolver.Param;
import com.alibaba.citrus.turbine.util.Function;
import com.eucalyptus.admin.EucaAdminConsole;
import com.eucalyptus.admin.console.EucaConsoleMessage;

@Function()
public class CredentialAction {

	protected Logger logger = LoggerFactory.getLogger(getClass());
	
	@Resource
    private EucaAdminConsole eucaAC;
	
	@Function("public")
	public void doQuery(Context context) {
		try {
			JSONArray result = new JSONArray();
			JSONArray users = new JSONArray();
        	JSONArray accArr = getAccounts();
        	for (Object object : accArr) {
        		JSONObject account = (JSONObject)object;
				JSONArray accUsers = (JSONArray)eucaAC.getUserList(account.getString("accountName")).getData();
				users.addAll(accUsers);
        	}
        	for (Object object : users) {
        		JSONObject user = (JSONObject)object;
        		JSONArray keys = (JSONArray)eucaAC.getUserKeys(user.getString("userAccount"), user.getString("userName")).getData();
        		for (Object object2 : keys) {
					JSONObject key = (JSONObject)object2;
					key.put("id", key.getString("accessKeyId"));
					key.put("type", "Key");
					key.put("account", user.getString("userAccount"));
				}
        		result.addAll(keys);
			}
        	for (Object object : users) {
        		JSONObject user = (JSONObject)object;
        		JSONArray certs = (JSONArray)eucaAC.getUserCerts(user.getString("userAccount"), user.getString("userName")).getData();
        		for (Object object2 : certs) {
					JSONObject cert = (JSONObject)object2;
					cert.put("id", cert.getString("certId"));
					cert.put("type", "Certificate");
					cert.put("account", user.getString("userAccount"));
				}
        		result.addAll(certs);
			}
        	context.put("json", result);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			context.put("json", false);
		}
	}
		
	private JSONArray getAccounts() {
		EucaConsoleMessage message = eucaAC.getAccountList();
		JSONArray accArr = (JSONArray)message.getData();
		return accArr;
	}

	@Function("public")
	public void doDownload(Context context, HttpServletResponse response, 
			@Param(name="accountName") String account, @Param(name = "userName") String user) throws IOException {
		try {
			String dir = System.getProperty("CredentialDir");
			String filePath = dir + "/" + user + ".zip";
			EucaConsoleMessage message = eucaAC.downloadUserCredentials(account, user, filePath);
			JSONObject credential = (JSONObject)message.getData();
			File f = new File(credential.getString("path"));
			FileInputStream fin = new FileInputStream(f);
			response.reset();
			response.setContentType("application/x-download;charset=utf-8");
			response.setHeader("Cache-Control", "no_cache");
			response.setHeader("Content-Transfer-Encoding", "binary");
			response.setHeader("Content-Disposition", "inline;filename=" + user + ".zip");
			OutputStream output = response.getOutputStream();
			byte[] buf = new byte[1024];
			int r = 0;
			while ((r = fin.read(buf)) != -1) {
				output.write(buf);
			}
			output.flush();
			output.close();
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			
		}
	}

	@Function("public")
	public void doModifyPassword(Context context,
			@Param(name = "user") String user, @Param(name="account") String account,
			@Param(name = "password") String password) throws IOException {
		try {
			EucaConsoleMessage message = eucaAC.modifyUserLogin(account, user, password);
			context.put("json", message.getStatus());
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			context.put("json", false);
		}
	}

}
